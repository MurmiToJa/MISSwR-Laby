function [allData, scenario, sensors] = mapav2()
%mapav2 - Returns sensor detections
%    allData = mapav2 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = mapav2 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 24.2 (R2024b) and Automated Driving Toolbox 24.2 (R2024b).
% Generated on: 22-Mar-2025 17:41:27

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

% Add sensors to scenario
addSensors(scenario, sensors, egoVehicle.ActorID);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Get the state of the ego vehicle
    actorState = state(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        if ~isa(sensor,'insSensor')
            poses = targetPoses(scenario,sensor.SensorIndex);
        end
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            if isa(sensor,'ultrasonicDetectionGenerator')
                [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
                numObjects = length(objectDets);
            else
                [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            end
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor();
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{4} = lidarPointCloudGenerator('SensorIndex', 4, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'AzimuthLimits', [-10 10], ...
    'ActorProfiles', profiles);
sensors{5} = insSensor('TimeInput', true, ...
    'MountingLocation', [2.8 0.9 0]);
numSensors = 5;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('GeoReference', [52.0397205 23.1873215 0], ...
    'VerticalAxis', 'Y');

% Add all road segments
roadCenters = [-18.238489373737 -9.1907122901701 -3.2646112236634e-05;
    -17.792549467991 -29.597284277902 -9.3468129691132e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Aleja Solidarności');

roadCenters = [-45.69 2.36 -0.00015311597294287;
    -35.578034253604 -1.1570613973435 -9.9128044701136e-05;
    -30.356288243587 -5.3073963226866 -7.4297143751512e-05;
    -27.831187940799 -8.1558745875797 -6.5810569300329e-05;
    -25.134546216805 -11.972384950691 -6.0662584727034e-05;
    -22.856471597506 -16.857065739824 -6.3154898626294e-05;
    -18 -29.5 -9.3468129691132e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', '1079264629');

roadCenters = [-47.089868323066 7.7348638150595 -0.00015311597294287;
    -40.811405521528 6.9114284013633 -0.0001124289472596;
    -36.12 5.95 -7.4480999949778e-05;
    -23.05 1.84 -3.9914607157687e-05];
lanetypes = [laneType('Driving')
    laneType('Driving')];
laneSpecification = lanespec(2, 'Type', lanetypes);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Białka');

roadCenters = [-135.2235337721 15.189930427373 -0.0014485539403086;
    -106.76127281779 11.773308822587 -0.00090252775827793;
    -51.78535256147 5.7417032942656 -0.0002123737209252;
    -45.46 5.93 -0.00015311597294287];
lanetypes = [laneType('Driving')
    laneType('Driving')
    laneType('Driving')];
laneSpecification = lanespec(3, 'Type', lanetypes);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Białka');

roadCenters = [-20.900739665961 15.27715519146 -5.2477645547278e-05;
    -30.438510330693 14.131142755239 -8.8140140551474e-05;
    -39.976275566623 14.209097775385 -0.00014085270101027;
    -133.45984055604 24.013444134029 -0.0014386124840069];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Białka');

roadCenters = [-20.900739665961 15.27715519146 -5.2477645547278e-05;
    -22.026069800111 12.72912031014 -5.0660229082844e-05;
    -22.822039633846 10.06981606595 -4.8697766871442e-05;
    -23.274925114469 7.3326226691898 -4.6595363404567e-05;
    -23.391587205855 4.5620473033167 -4.443600898929e-05;
    -23.15830175549 1.7914703148171 -4.2206161546376e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [-22.56820635681 -0.95685465616971 -3.9914607157687e-05;
    -21.820288258856 -3.1710933239312 -3.8035455637075e-05;
    -20.839070341426 -5.2963183682459 -3.6172249634259e-05;
    -19.645137465951 -7.3102759478952 -3.4381813577955e-05;
    -18.238489373737 -9.1907122901701 -3.2646112236634e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [-23.15830175549 1.7914703148171 -4.2206161546376e-05;
    -22.56820635681 -0.95685465616971 -3.9914607157687e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [-18.238489373737 -9.1907122901701 -3.2646112236634e-05;
    -16.035880082064 -11.482842845946 -3.0458233411856e-05;
    -13.517627799913 -13.441168970386 -2.8463411894997e-05;
    -10.752350010561 -15.032309606633 -2.6766964153602e-05;
    -7.7880792102894 -16.200630223562 -2.5327713197854e-05;
    -4.6865717037988 -16.935003596048 -2.4210475531916e-05;
    -1.5095839484729 -17.235429451527 -2.3476237705822e-05;
    1.6742657781827 -17.068527242988 -2.3068067092069e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [1.6742657781827 -17.068527242988 -2.3068067092069e-05;
    4.5218894648332 -16.534438570039 -2.3040095022964e-05;
    7.2734475971426 -15.633163663101 -2.3305334577728e-05;
    9.8809074742398 -14.386956398838 -2.3871194415825e-05;
    12.309959994536 -12.806943895868 -2.4718485673425e-05;
    14.512572813787 -10.937633793441 -2.585824767376e-05;
    16.454437172474 -8.7901533136581 -2.7239621942954e-05;
    18.101244632956 -6.4201369376037 -2.8864319352007e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [18.101244632956 -6.4201369376037 -2.8864319352007e-05;
    26.156905952687 -4.4951629379122 -5.5106438954677e-05;
    31.049316271295 -4.2503450381056 -7.6834678725657e-05;
    42.007499446244 -4.7954784882769 -0.00013984904746556;
    61.055681318177 -6.8092343721714 -0.00029525943042907;
    129.08989385799 -12.638385976024 -0.0013161595881641];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Białka');

roadCenters = [18.101244632956 -6.4201369376037 -2.8864319352007e-05;
    19.487303594793 -3.7163167134518 -3.0789971639411e-05;
    20.49596560804 -0.84559549729095 -3.2916874493583e-05;
    21.099784584717 2.1363923154996 -3.5185138362426e-05;
    21.291899733671 5.1740124934816 -3.7563751109193e-05;
    21.065450373398 8.2005040979051 -3.9987964915333e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [20.736080879508 9.9807924669947 -4.1448771819219e-05;
    19.933250217496 12.695731072584 -4.3724737052386e-05;
    18.794197576623 15.28827361917 -4.596356676867e-05;
    17.332646945475 17.713913135972 -4.8111702843912e-05;
    15.576045564139 19.928142750318 -5.0125218541197e-05;
    13.551840427941 21.908709222832 -5.2011810838692e-05;
    11.294340090466 23.622232519267 -5.3743144265539e-05;
    8.8309912373741 25.035332570333 -5.5256408792559e-05;
    6.2166871108418 26.125756125766 -5.655526589976e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [21.065450373398 8.2005040979051 -3.9987964915333e-05;
    20.736080879508 9.9807924669947 -4.1448771819219e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [129.67984482832 -6.5408784449864 -0.0013189295514779;
    70.675732905577 -0.099640431847134 -0.00039076104341314;
    42.796532571621 2.848647220533 -0.0001439163970498;
    30.884581404444 4.3729322991031 -7.6119354092796e-05;
    26.3 6.48 -5.3766383864229e-05;
    21.065450373398 8.2005040979051 -3.9987964915333e-05];
lanetypes = [laneType('Driving')
    laneType('Driving')];
laneSpecification = lanespec(2, 'Type', lanetypes);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Białka');

roadCenters = [6.2166871108418 26.125756125766 -5.655526589976e-05;
    3.3965338258597 26.893503382264 -5.762723991154e-05;
    0.50090292927384 27.28294064513 -5.8398845441232e-05;
    -2.4221744321833 27.294068019209 -5.888497255313e-05;
    -5.3246671331459 26.926885502555 -5.9083209380972e-05;
    -8.1516823456077 26.181392970186 -5.8957605446608e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [6.2166871108418 26.125756125766 -5.655526589976e-05;
    4.4600810187344 42.437659715356 -0.00014280358599805;
    4.5698561564771 54.955322885817 -0.00023849520546548];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Cmentarna');

roadCenters = [4.5698561564771 54.955322885817 -0.00023849520546548;
    1.3654684203542 51.706291963838 -0.00020982795265212;
    -2.0584973192164 46.343168998961 -0.00016877157202089;
    -5.208009107656 35.917348928269 -0.0001032977554587;
    -8.1516823456077 26.181392970186 -5.8957605446608e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Cmentarna');

roadCenters = [-8.1516823456077 26.181392970186 -5.8957605446608e-05;
    -10.807156964055 25.102097329068 -5.8554753794127e-05;
    -13.297953099456 23.688998326431 -5.7845168173642e-05;
    -15.596624277255 21.964349253653 -5.6865291778507e-05;
    -17.648277019016 19.972656898841 -5.5651062826456e-05;
    -19.425464526485 17.7250476618 -5.4159565598511e-05;
    -20.900739665961 15.27715519146 -5.2477645547278e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Stanisława Różyczki de Rosenwertha');

roadCenters = [3.3 -89.7 -0.00039765272923731;
    3.9 -72.9 -0.00030552634539305;
    3.88 -64.55 -0.00022906029436243;
    4.5 -57.5 -0.00014935343367739;
    3.9 -35.4 -4.2597725004256e-05;
    4.61 -16.5 -2.3068067092069e-05];
lanetypes = [laneType('Driving')
    laneType('Driving')];
laneSpecification = lanespec(2, 'Type', lanetypes);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Aleja Solidarności');

roadCenters = [-18.15 -29.02 0;
    2.58 -66.3 0];
roadWidth = 3.75;
road(scenario, roadCenters, roadWidth, 'Name', 'Road');

roadCenters = [4.5 55 0;
    9 89.1 0];
roadWidth = 3.75;
road(scenario, roadCenters, roadWidth, 'Name', 'Road1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [6.17 -48.08 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [6.17 -48.08 0.01;
    6 -37.12 0.01;
    6 -30.22 0.01;
    6.21 -22.27 0.01;
    6.41 -19.2 0.01;
    9.89 -14.05 0.01;
    12.13 -12.53 0.01;
    14.97 -9.69 0.01;
    17.81 -7.18 0.01;
    23.16 -4.77 0.01;
    29.37 -4.09 0.01;
    74.9 -8.5 0;
    130.7 -12 0];
speed = [30;30;30;30;30;30;30;0;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0;1;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [-55.2 5.6 0], ...
    'RearOverhang', 1, ...
    'FrontOverhang', 0.9, ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [-55.2 5.6 0;
    -41.5 5.3 0;
    -36.9 4.3 0;
    -31.2 3.3 0;
    -26 1.5 0;
    -22.7 -1 0;
    -20.4 -5.2 0;
    -17.2 -9.7 0;
    -11.7 -14.1 0;
    -5.8 -16.5 0;
    -0.5 -17.1 0;
    3.8 -16.5 0;
    7.68 -15.59 0.01;
    19.92 -6.6 0.01;
    35.2 -4.8 0;
    45.9 -6.3 0;
    87.5 -9.4 0;
    129.5 -13.3 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;0;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0.2;0;0;0;0;0];
trajectory(truck, waypoints, speed, waittime);

siwyDym = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [41.0745780022824 4.4981066018937 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'SiwyDym');
waypoints = [41.0745780022824 4.4981066018937 0;
    28.75 5.17 0.01;
    23.21 4.76 0.01;
    21.42 1.79 0.01;
    19.83 -3.85 0.01;
    20.87 -5.19 0.01;
    24.44 -5.5 0.01;
    30.33 -4.54 0.01;
    51.6 -5.9 0;
    81.1 -8.5 0;
    129.8 -12.3 0];
speed = [30;30;15;15;15;15;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0;0;0;0;0];
trajectory(siwyDym, waypoints, speed, waittime);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

